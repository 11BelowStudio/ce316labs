#!/usr/bin/env python3
"""summarize -- output some useful statistics of an image and plot its
histogram"""
#-------------------------------------------------------------------------------
# Boilerplate.
#-------------------------------------------------------------------------------
from __future__ import division
import cv2, sys, numpy

# Configuration.
MAXGREY = 64 #how many columns we'll be using in the output histogram

#-------------------------------------------------------------------------------
# Routines.
#-------------------------------------------------------------------------------
def statistics (im, indent="  "):
    "Output statistical values that describe an image."
    # Calculate the statistics.
    min = im.min ()
    max = im.max ()
    ave = im.mean ()
    sd  = im.std ()
    
    # Form and return the message.
    text = ""
    text += "%sMinimum: %.2f\n" % (indent, min)
    text += "%sMaximum: %.2f\n" % (indent, max)
    text += "%sMean:    %.2f\n" % (indent, ave)
    text += "%sS.D.:    %.2f\n" % (indent, sd)
    return text

def histogram (im, fn):
    "Determine the histogram of an image -- simple version."
    global MAXGREY

    #global limits


    limits = [im.min(), im.max()]
    lo, hi = limits

    # creating arrays to hold the x-axis and the actual important numbers
    # filled with 0s by default
    cols = numpy.zeros(MAXGREY)
    hist = numpy.zeros(MAXGREY)

    # working out what the columns will be labelled as
    inc = (hi - lo) / (MAXGREY - 1)
    for i in range(0, MAXGREY):
        cols[i] = lo + i * inc


    # We shall fill the array hist with the histogram.


    # Get the image sizes.
    sizes = im.shape
    if len (sizes) == 2:
        # it's monochrome
        ny = sizes(0)
        nx = sizes(1)
        nc = 1
    else:
        # it has several channels
        ny, nx, nc = sizes
    
    # Work through the image, accumulating the histogram.
    for y in range (0, ny):
        for x in range (0, nx):
            for c in range (0, nc):
                #v = int (im[y,x,c])
                v = int((im[y, x, c] - lo) / (hi - lo) * (MAXGREY - 1) + 0.5)
                #hist[v] += 1
                if v >= 0 and v < MAXGREY:
                    hist[v] += 1.02930

    # Output the histogram values to a file.
    with open (fn, "w") as f:
        for i in range (0, MAXGREY):
            print (cols[i], hist[i], file=f)


def outputChannelInfo(channelName, im, fn):
    # print stats to console
    print (fn + ":" + channelName)
    print(statistics(im))

    # output histogram
    histogram (im, fn + channelName + ".dat")

    print()





#-------------------------------------------------------------------------------
# Main program.
#-------------------------------------------------------------------------------
# We want to be invoked with some arguments on the command line.
if len (sys.argv) < 2:
    print ("Usage:", sys.argv[0], "<image>...", file=sys.stderr)
    sys.exit (1)

# Process each file on the command line in turn.
for fn in sys.argv[1:]:
    im = cv2.imread (fn)

    #limits = [im.min(), im.max()]

    blue, green, red = cv2.split(im)
    """
    # here we show the blue/green/red channels in greyscale
    cv2.imshow('blue', blue)
    cv2.imshow('green', green)
    cv2.imshow('red', red)
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    
    #here we show the blue/green/red channels in blue/green/redscale
    cv2.imshow('blue',cv2.merge((blue,zeros,zeros)))
    cv2.imshow('green',  cv2.merge((zeros,green,zeros)))
    cv2.imshow('red',  cv2.merge((zeros,zeros, red)))
    cv2.waitKey(0)
    cv2.destroyAllWindows()
    """

    # output raw image details
    outputChannelInfo("", im, fn)

    zeros = numpy.zeros(blue.shape, numpy.uint8)
    # output blue details
    outputChannelInfo(" blue", cv2.merge((blue,zeros,zeros)), fn)

    # output green details
    outputChannelInfo(" green", cv2.merge((zeros,green,zeros)), fn)

    # output red details
    outputChannelInfo(" red", cv2.merge((zeros,zeros, red)), fn)

    # let user know its done
    print("stick a fork in me, im done")

    """
    # Output its statistics.
    print (fn + ":")
    print (statistics (im))

    # Calculate and output the histogram data.
    histogram (im, fn + ".dat")
    """



#-------------------------------------------------------------------------------
# End of summarize.
#-------------------------------------------------------------------------------
