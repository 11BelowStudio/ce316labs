#!/usr/bin/env python3
"Demonstrate content-based image retrieval using histograms"
import sys, math, cv2, numpy, os

#import matplotlib.pyplot as plt

# The number of bins in a histogram.
NBINS = 64

#------------------------------------------------------------------------------
def compare (h1, h2):
    "Work out the correlation between two histograms"
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def histogram3 (im):
    """Determine the histogram of an image,
       The returned histogram has histograms for each colour
       stacked on each other. """
    MAXGREY = 256

    # Get the image sizes.
    sizes = im.shape
    if len (sizes) == 2:
        # it's monochrome
        ny = sizes (0)
        nx = sizes (1)
        nc = 1
    else:
        # it has several channels
        ny, nx, nc = sizes

    # We shall fill the array hist with the histogram.
    hists = [numpy.zeros (MAXGREY, dtype=int) for i in range(0,nc)]

    # Work through the image, accumulating the histogram.
    for y in range (0, ny):
        for x in range (0, nx):
            for c in range(0, nc):
                v = int (im[y,x,c])
                hists[c][v] += 1
    #print(hists)

    # Return the histogram we have computed.

    # this program takes long time to complete
    # so I decided to use numpy function instead
    # of doing it "manually"
    return numpy.concatenate(hists)

#------------------------------------------------------------------------------
# Say hello and initialize things.
if len(sys.argv) < 3:
    print ("Usage:", sys.argv[0], "<probe> <test-images>", file=sys.stderr)
    sys.exit (1)
probe_file = sys.argv[1]
v_best = 0
f_best = "?"

# Read in the probe image and find its histogram.
im = cv2.imread (probe_file)
probe = histogram3 (im)

# Ensure saved histograms directory is created
saved_hist_dir = "saved_histograms"
if not os.path.isdir(saved_hist_dir):
    os.mkdir(saved_hist_dir)

# We now enter the main loop.  The basic idea is to load an image, find its
# histogram, then compare that with the histogram of the probe image.  We are
# careful to skip the case when the test image is the same as the probe.
for file in sys.argv[2:]:
    if file != probe_file:
        # Check for previously computed histogram, to speedup whole process.
        # Otherwise for each image all histograms are computed again
        saved_histogram_fname = f'{saved_hist_dir}/{sys.argv[0]}_{file}'
        try:  
            h = numpy.load(saved_histogram_fname + '.npy')
        except IOError:
            im = cv2.imread (file)
            h = histogram3 (im)
            print(len(h))
            numpy.save(saved_histogram_fname, h)	
        v = compare (probe, h)
        if v > v_best:
            v_best = v
            f_best = file

#plt.plot(probe)
#plt.plot([0]*len(probe))
#plt.show()


# We've finished our work, so say which of the test set best matches the
# probe and exit.
print (f_best)
