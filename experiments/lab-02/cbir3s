#!/usr/bin/env python3
"Demonstrate content-based image retrieval using histograms"
import sys, math, cv2, numpy

# The number of bins in a histogram.
NBINS = 64

#------------------------------------------------------------------------------
def compare (h1, h2):
    "Work out the correlation between two histograms"
    sumx = sumy = sumxx = sumyy = sumxy = 0.0
    n = len (h1)
    for i in range (0, n):
        v1 = float (h1[i])
        v2 = float (h2[i])
        sumx += v1
        sumy += v2
        sumxx += v1 * v1
        sumxy += v1 * v2
        sumyy += v2 * v2
    v1 = sumxy - sumx * sumy / n
    v2 = math.sqrt((sumxx-sumx*sumx/n) * (sumyy-sumy*sumy/n))
    return abs (v1 / v2)

def histogram (im):
    """Determine the histogram of an image -- simple version copied from
    lab-01's summarize program."""
    MAXGREY = 256

    # https://stackoverflow.com/questions/58465783/how-to-set-background-color-on-image-to-white-with-opencv-in-python/58466505#58466505

    HSV_MIN = numpy.array([
        im[0, 0, 0],
        im[0, 0, 1],
        im[0, 0, 2]
    ], numpy.uint8)
    HSV_MAX = numpy.array([179, 255, 255], numpy.uint8)

    hsvRaw = cv2.cvtColor(im, cv2.COLOR_BGR2HSV)

    mask = cv2.inRange(hsvRaw, HSV_MIN, HSV_MAX)
    #reverseMask = 255 - mask

    blackBG = cv2.bitwise_and(im,im, mask = mask)



    maskedIm = blackBG


    #cv2.imshow("white bg",maskedIm)
    #cv2.waitKey(0)

    hsv = cv2.cvtColor(maskedIm, cv2.COLOR_BGR2HSV)
    h, s, v = cv2.split(hsv)

    hHist = cv2.calcHist([h], [0], None, [256], [0,256])
    sHist = cv2.calcHist([s], [0], None, [256], [0,256])
    vHist = cv2.calcHist([v], [0], None, [256], [0,256])

    hist = numpy.vstack((hHist, sHist, vHist))

    assert len(hist) == 256 * 3

    #print(hist)


    # Return the histogram we have computed.
    return hist

#------------------------------------------------------------------------------
# Say hello and initialize things.
if len(sys.argv) < 3:
    print ("Usage:", sys.argv[0], "<probe> <test-images>", file=sys.stderr)
    sys.exit (1)
probe_file = sys.argv[1]
v_best = 0
f_best = "?"

# Read in the probe image and find its histogram.
im = cv2.imread (probe_file)
probe = histogram (im)


# We now enter the main loop.  The basic idea is to load an image, find its
# histogram, then compare that with the histogram of the probe image.  We are
# careful to skip the case when the test image is the same as the probe.

for file in sys.argv[2:]:
    if file != probe_file:
        im = cv2.imread (file)

        h = histogram (im)

        v = compare (probe, h)
        if v > v_best:
            v_best = v
            f_best = file

        #break


# We've finished our work, so say which of the test set best matches the
# probe and exit.
print (f_best)
